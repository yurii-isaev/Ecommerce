// ^: Начало строки.
// [^\s@]+: Это набор символов, который мы ищем в начале адреса электронной почты. Давайте разберем его подробнее:
// [^\s@]: Этот элемент символьного класса ([]) соответствует любому символу, кроме пробела (\s) и знака @.
// +: Этот символ обозначает, что предыдущий элемент (любой символ, кроме пробела и @) должен повторяться один или более раз.
// @: Этот символ просто соответствует знаку @ в адресе электронной почты.
// [^\s@]+: Это аналогичный набор символов, который мы ищем после символа @.
// Он также соответствует любому символу, кроме пробела и @, повторяющемуся один или более раз.
//\.: Этот элемент соответствует точке в домене электронной почты. Точка . экранирована обратным слешем,
// потому что в регулярных выражениях она имеет специальное значение (любой символ), и мы хотим сопоставить именно символ точки.
// [^\s@]+: Аналогично первым двум элементам, этот элемент соответствует любому символу в домене,
// кроме пробела и @, повторяющемуся один или более раз.
// $: Конец строки.
export const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

// ^: Начало строки.
// [a-zA-Z]+ -- Эта часть описывает один или более символов,
// которые должны быть буквами в верхнем или нижнем регистре (от a до z и от A до Z).
// + после этого символа класса означает, что должен быть как минимум один символ.
// (([',. -][a-zA-Z ])?[a-zA-Z]*)* --
// Эта часть определяет последующие части имени, которые могут содержать апостроф, запятую, точку, дефис или пробел,
// за которым следует другая часть имени. Возможные сочетания этих символов:
// ([',. -][a-zA-Z ])? --
// Эта часть определяет один из символов апострофа, запятой, точки, дефиса или пробела,
// за которым следует один или более символов, являющихся буквами в верхнем или нижнем регистре.
// Весь этот фрагмент является необязательным блоком (обозначенным ?),
// что означает, что он может быть либо присутствовать, либо отсутствовать.
// [a-zA-Z]* -- Этот фрагмент описывает последующие символы имени,
// которые должны быть буквами в верхнем или нижнем регистре (от a до z и от A до Z).
// * после этого символьного класса означает, что этот блок может повторяться ноль или более раз.
// $: Конец строки.
export const fullNamePattern = /^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$/;

// /: Обратный слеш / начинает и заканчивает регулярное выражение.
// ^: Символ каретки ^ указывает на начало строки. Таким образом, это означает,
// что строка должна начинаться с соответствия данному шаблону.
// [a-zA-Z0-9\s,'.-]:
// Это набор символов внутри квадратных скобок [], который определяет допустимые символы:
// a-z: Буквы от "a" до "z" в нижнем регистре.
// A-Z: Буквы от "A" до "Z" в верхнем регистре.
// 0-9: Цифры от "0" до "9".
// \s: Пробелы (включая пробел, табуляцию и перевод строки).
// ,'.-: Запятые, апострофы, точки и дефисы.
// +: Этот символ указывает на то, что предыдущий символ или группа символов должны встречаться один или несколько раз.
// В данном случае, это означает, что любое количество символов из предыдущего набора может быть в строке, включая ноль.
// $ -- Этот символ обозначает конец строки. Это означает, что сопоставление должно завершаться в конце строки.
// ,: Символ запятой используется для разделения частей адреса (улица, дом, квартира).
// \s*: Этот шаблон позволяет ноль или более пробелов после запятой.
// \d+: Этот шаблон соответствует одной или более цифрам (дом и квартира).
// (?:\s*[-\/]\s*\d+)? --
// Эта часть опциональна и позволяет указывать диапазон или дробление в номере дома (например, 12-14 или 12/14).
// Символы - или / могут быть использованы для разделения номеров.
// (?:,\s*\d+)?: Эта часть также является опциональной и позволяет добавить номер квартиры после дома.
export const addressPattern = /^[a-zA-Z0-9\s,'.-]+,\s*\d+(?:\s*[-/]\s*\d+)?(?:,\s*\d+)?$/;

// ^: Начало строки.
// [a-zA-Z\u0080-\u024F\s/(). "']`:
// [a-zA-Z]: Это диапазон символов от a до z и от A до Z, что означает любую букву в верхнем или нижнем регистре.
// \u0080-\u024F: Этот диапазон Unicode символов охватывает различные латинские символы и специальные символы,
// \s: Этот символ соответствует любому пробельному символу, включая пробел, табуляцию и перевод строки.
// /(). ": Это набор специальных символов, который мы также ищем в строке.
// Обратные слеши (/и.`) не требуют экранирования внутри квадратных скобок.
// ']: Здесь перечислены дополнительные символы, которые мы разрешаем в строке, включая пробел и одинарную кавычку.
// $: Конец строки.
export const cityPattern = /^[a-zA-Z\u0080-\u024F\s/()`. "']+$/;

// ^: Начало строки.
// [a-zA-Z]: Соответствует любой букве в верхнем или нижнем регистре.
// \s: Соответствует любому пробельному символу (пробелу, табуляции и т. д.).
// .'-: Эти специальные символы позволяют использовать апострофы и дефисы в названии штата.
// +: Позволяет повторять предыдущий шаблон (буквы, пробелы, апострофы, дефисы) один или более раз.
// $: Конец строки.
export const statePattern = /^[a-zA-Z\s.'-]+$/;

// ^: Начало строки.
// \d{5}: Соответствует пяти цифрам по подряд (без пробелов или других символов).
// (?:...): Это немаркирующая группа, которая позволяет опционально добавить дефис или пробел и еще четыре цифры,
// но не сохраняет их для последующего использования в регулярном выражении.
// [-\s]: Соответствует либо дефису, либо пробелу.
// \d{4}: Соответствует четырем последовательным цифрам (опционально, если указана группа с дефисом и еще четырьмя цифрами).
// ?: Это символ, обозначающий, что предыдущий элемент (группа с дефисом и еще четырьмя цифрами) может появиться ноль или один раз.
// $: Конец строки.
export const zipCodePattern = /^\d{3}\s?\d{3}$/;

// ^: Начало строки.
// [a-zA-Z]+: Этот фрагмент обозначает, что мы ожидаем,
// чтобы имя начиналось с одной или нескольких букв в любом регистре (латинский алфавит от A до Z).
// (([',. -][a-zA-Z ])?[a-zA-Z]*)*: Эта часть регулярного выражения определяет допустимые символы и структуру имени пользователя.
// ( и )?: Этот фрагмент обозначает, что следующий символ или группа символов является необязательным.
// [',. -]: Этот набор символов позволяет использовать следующие символы:
// апостроф ('), запятую (,), точку (.), пробел ( ) и тире (-).
// Они могут быть размещены между словами или использоваться в составе слова.
// [a-zA-Z ]*: Этот фрагмент позволяет использовать любое количество букв в любом регистре или пробелов после допустимых символов.
// *: Этот символ обозначает, что предыдущий фрагмент может повторяться ноль или более раз.
// $: Конец строки.
export const cardHolderNamePattern = /^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$/;

// ^: Начало строки.
// \d{4}: Этот фрагмент означает, что ожидается последовательность из четырех цифр.
// \d - это специальный символ, который соответствует любой цифре от 0 до 9, а {4} указывает,
// что предыдущий элемент (в данном случае цифра) должен повторяться ровно 4 раза.
// -?: Этот фрагмент означает, что символ дефиса - может быть или не быть присутствовать.
// ? - это специальный символ, который указывает, что предыдущий элемент (в данном случае дефис) может быть или не быть.
// \d{4}: Опять же, это означает ожидание последовательности из четырех цифр.
// -?: Снова указывается, что символ дефиса - может быть или не быть присутствовать.
// \d{4}: Опять же, это означает ожидание последовательности из четырех цифр.
// -?: Еще раз указывается, что символ дефиса - может быть или не быть присутствовать.
// \d{4}: Опять же, это означает ожидание последовательности из четырех цифр.
// -?: И снова указывается, что символ дефиса - может быть или не быть присутствовать.
// \d{4}: Последняя часть означает ожидание последовательности из четырех цифр.
// $: Конец строки.
export const creditCardNumberPattern = /^\d{4}-?\d{4}-?\d{4}-?\d{4}$/;

// ^: Начало строки.
// (0[1-9]|1[0-2]): Это группа, которая описывает два возможных варианта:
// 0[1-9]: Первая цифра должна быть ноль (0), а вторая цифра должна быть от 1 до 9.
// Это позволяет вводить месяц от 01 до 09.
// |: Это означает "или".
// 1[0-2]: Первая цифра должна быть единица (1), а вторая цифра должна быть от 0 до 2.
// Это позволяет вводить месяц от 10 до 12.
// $: Конец строки.
export const expirationMonthPattern = /^(0[1-9]|1[0-2])$/;

// ^: Начало строки.
// \d: Это специальный символ, который сопоставляется с любой цифрой от 0 до 9.
// {3,4}: Это квантификатор, который указывает на количество раз,
// которое предыдущий элемент (в данном случае \d, то есть цифры) должен повторяться.
// В данном случае {3,4} означает, что предыдущий элемент (цифры) должен повторяться от 3 до 4 раз.
// Таким образом, это позволяет сопоставлять или трехзначные или четырехзначные числа.
// $: Конец строки.
export const ccvPattern = /^\d{3,4}$/;